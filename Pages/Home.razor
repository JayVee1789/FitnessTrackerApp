@page "/"
@using FitnessTrackerApp.Services
@using FitnessTrackerApp.Models

@inject PoidsService PoidsService
@inject SupabaseService SupabaseService

<div class="container py-5">
    <h2 class="fw-bold mb-4 text-center">Journal de Musculation 💪</h2>

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-success text-center">@message</div>
    }

    <div class="card shadow-sm p-4 mb-5">
        <h5 class="mb-3">Ajouter une séance</h5>

        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Exercice</label>
                <select class="form-select" @bind="selectedExercice">
                    @foreach (var ex in exercices)
                    {
                        <option value="@ex">@ex</option>
                    }
                </select>
            </div>

            <div class="col-md-4">
                <label class="form-label">Nouveau exercice</label>
                <input class="form-control" placeholder="ex: Tractions" @bind="newExercice" />
            </div>

            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-outline-dark w-100" @onclick="AddExercice">➕ Ajouter</button>
            </div>

            <div class="col-md-4">
                <label class="form-label">Date</label>
                <input type="date" class="form-control" @bind="selectedDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Poids</label>
                <input type="number" class="form-control" @bind="poids" placeholder="ex: 50" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Unité</label>
                <select class="form-select" @bind="selectedUnite">
                    <option value="kg">kg</option>
                    <option value="lb">lb</option>
                </select>
            </div>
        </div>

        <button class="btn btn-primary mt-4 w-100" @onclick="AddEntry">💾 Enregistrer</button>
    </div>

    <div class="d-flex flex-wrap gap-2 justify-content-center mb-4">
        <button class="btn btn-outline-primary" @onclick="ExportToSupabase">📤 Exporter vers Supabase</button>
        <button class="btn btn-outline-secondary" @onclick="ImportFromSupabase">📥 Importer depuis Supabase</button>
    </div>

    @if (data.Count > 0)
    {
        <div class="card shadow-sm p-4 mb-4">
            <h5 class="mb-3">Historique des poids</h5>

            <div class="table-responsive">
                <table class="table table-hover text-center">
                <thead class="table-light">
                    <tr>
                        <th>Exercice</th>
                        @foreach (var date in allDates)
                        {
                            <th>@date.ToString("dd MMM")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in data.GroupBy(e => e.Exercice))
                    {
                        <tr>
                            <td class="fw-bold">@group.Key</td>
                            @foreach (var date in allDates)
                            {
                                var match = group.FirstOrDefault(e => e.Date.Date == date.Date);
                                <td>
                                    @if (match != null)
                                    {
                                        double displayedPoids = selectedUnite == "lb" ? match.Poids / 0.453592 : match.Poids;
                                        string suffix = selectedUnite == "lb" ? "lb" : "kg";
                                        <div>@Math.Round(displayedPoids, 1) @suffix</div>
                                        <button class="btn btn-sm btn-outline-danger"
                                                @onclick="@(() => DeleteById(match.Id))">
                                            ✖
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>

        <div class="row g-3 mb-4">
            <div class="col-md-6">
                <label class="form-label">Supprimer un exercice</label>
                <div class="input-group">
                    <select class="form-select" @bind="selectedExerciceToDelete">
                        @foreach (var ex in exercices)
                        {
                            <option value="@ex">@ex</option>
                        }
                    </select>
                    <button class="btn btn-danger" @onclick="DeleteExercice">🗑️</button>
                </div>
            </div>

           @*  <div class="col-md-6">
                <label class="form-label">Supprimer une date</label>
                <div class="input-group">
                    <select class="form-select" @bind="selectedDateToDelete">
                        @foreach (var date in allDates)
                        {
                            <option value="@date">@date.ToString("dd MMM yyyy")</option>
                        }
                    </select>
                    <button class="btn btn-danger" @onclick="DeleteDate">🗑️</button>
                </div>
            </div> *@
        </div>

        @* <h6 class="mt-4 mb-2">Supprimer toutes les entrées par exercice</h6>
        <div class="d-flex flex-wrap gap-2">
            @foreach (var ex in data.Select(e => e.Exercice).Distinct())
            {
                <button class="btn btn-sm btn-outline-danger"
                        @onclick="() => DeleteEntriesForExercice(ex)">
                    🗑️ @ex
                </button>
            }
        </div> *@
    }
</div>


@code {
    List<string> exercices = new();
    string selectedExercice = "";
    string newExercice = "";
    DateTime selectedDate = DateTime.Today;
    double poids;

    List<PoidsEntry> data = new();
    List<DateTime> allDates = new();

    string selectedExerciceToDelete = "";
    DateTime selectedDateToDelete = DateTime.Today;

    string message = "";

    string selectedUnite = "kg"; // valeur par défaut

    protected override async Task OnInitializedAsync()
    {
        exercices = await PoidsService.GetExercicesAsync();
        selectedExercice = exercices.FirstOrDefault() ?? "";
        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
    }

    async void AddExercice()
    {
        if (!string.IsNullOrWhiteSpace(newExercice) && !exercices.Contains(newExercice))
        {
            exercices.Add(newExercice);
            selectedExercice = newExercice;
            newExercice = "";
            await PoidsService.SaveExercicesAsync(exercices);
        }
    }

    async Task AddEntry()
    {
        double poidsKg = selectedUnite == "lb" ? poids * 0.453592 : poids;
        var entry = new PoidsEntry
            {
                Exercice = selectedExercice,
                Date = selectedDate,
                Poids = poidsKg
            };

         await PoidsService.AddEntryAsync(entry);
               
        data = await PoidsService.GetEntriesAsync();
        exercices = data.Select(e => e.Exercice).Distinct().OrderBy(x => x).ToList();
        UpdateDates();
        message = "Entrée enregistrée ✅";
    }

    async Task DeleteEntry(string exercice, DateTime date)
    {
        await PoidsService.RemoveEntryAsync(exercice, date);
        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
        message = $"Supprimé : {exercice} - {date:dd MMM}";
    }

    async Task DeleteExercice()
    {
        exercices.Remove(selectedExerciceToDelete);
        await PoidsService.SaveExercicesAsync(exercices); // sauvegarde la liste mise à jour

        selectedExerciceToDelete = exercices.FirstOrDefault() ?? "";
        message = $"Exercice supprimé de la liste déroulante : {selectedExerciceToDelete}";
    }


    async Task DeleteDate()
    {
        await PoidsService.RemoveDateAsync(selectedDateToDelete);
        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
        message = $"Date supprimée : {selectedDateToDelete:dd MMM yyyy}";
    }

    void UpdateDates()
    {
        allDates = data.Select(e => e.Date.Date).Distinct().OrderBy(d => d).ToList();
    }
    async Task DeleteEntriesForExercice(string exercice)
    {
        await PoidsService.RemoveEntriesForExerciceAsync(exercice);
        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
        message = $"Toutes les entrées pour « {exercice} » ont été supprimées.";
    }

    async Task ExportToSupabase()
    {
        var local = await PoidsService.GetEntriesAsync();
        var remote = await SupabaseService.GetEntriesAsync();
        int added = 0;

        // Supprimer ce qui n'existe plus en local
        await SupabaseService.DeleteEntriesNotInAsync(local);

        foreach (var entry in local)
        {
            if (!remote.Any(x => x.Exercice == entry.Exercice && x.Date.Date == entry.Date.Date))
            {
                await SupabaseService.AddEntryAsync(entry);
                added++;
            }
        }

        message = $"Synchronisation terminée. {added} nouvelle(s) entrée(s) exportée(s).";
    }

    async Task ImportFromSupabase()
    {
        var supabaseEntries = await SupabaseService.GetEntriesAsync();
        await PoidsService.OverwriteEntriesAsync(supabaseEntries);
        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
        message = $"Importé {supabaseEntries.Count} entrées depuis Supabase ✅";
    }
    async Task DeleteById(Guid id)
    {
        var entry = data.FirstOrDefault(e => e.Id == id);
        if (entry is null) return;

        await PoidsService.RemoveByIdAsync(id);
        await SupabaseService.DeleteByExerciceAndDateAsync(entry.Exercice, entry.Date);

        data = await PoidsService.GetEntriesAsync();
        UpdateDates();
        message = "Entrée supprimée (local + Supabase) ✅";
    }

}
